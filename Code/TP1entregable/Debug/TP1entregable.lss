
TP1entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000815  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002eb  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000187  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000196f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <puls>:
#include <avr/io.h>
#define F_CPU 8000000UL // Defino la frecuencia de oscilador en 8MHz
#include <util/delay.h>

char puls() { /* Función para detectar correctamente al pulsador*/
	if ((PINC & (1<<PINC0))== 0) {
  80:	30 99       	sbic	0x06, 0	; 6
  82:	10 c0       	rjmp	.+32     	; 0xa4 <puls+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	8f e3       	ldi	r24, 0x3F	; 63
  86:	9c e9       	ldi	r25, 0x9C	; 156
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <puls+0x8>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <puls+0xe>
  8e:	00 00       	nop
		_delay_ms(20);
		while((PINC & (1<<PINC0)) == 0); //Pausa  la ejecucion mientras el pulsador este presionado
  90:	30 9b       	sbis	0x06, 0	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <puls+0x10>
  94:	8f e3       	ldi	r24, 0x3F	; 63
  96:	9c e9       	ldi	r25, 0x9C	; 156
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <puls+0x18>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <puls+0x1e>
  9e:	00 00       	nop
		_delay_ms(20);
		return 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	08 95       	ret
	} 
	else
		return 0;
  a4:	80 e0       	ldi	r24, 0x00	; 0
}
  a6:	08 95       	ret

000000a8 <main>:


int main(void) {
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	00 d0       	rcall	.+0      	; 0xae <main+0x6>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <main+0x8>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
	signed char i=3; /* Declaro indice */
	unsigned char vec1[4]={0x81, 0x42, 0x24, 0x18}; /* Declaración de arreglo correspondiente a la secuencia */
  b4:	81 e8       	ldi	r24, 0x81	; 129
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	82 e4       	ldi	r24, 0x42	; 66
  ba:	8a 83       	std	Y+2, r24	; 0x02
  bc:	84 e2       	ldi	r24, 0x24	; 36
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8c 83       	std	Y+4, r24	; 0x04
	0x81 - LED Verde y LED Amarillo
	0x42 - LED Verde y LED Amarillo
	0x24 - LED Rojo y LED Azul
	0x18 - LED Rojo y LED Azul
	*/	
	DDRB = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFE; 	// Se asigna el valor 0b11111110 en hexadecimal al puerto C de Data Direction Register. Lo que hace es asignar el bit 0 como entrada.
  c8:	8e ef       	ldi	r24, 0xFE	; 254
  ca:	87 b9       	out	0x07, r24	; 7
	PORTC = 1<<PINC0; 	//Se asigna 1 al bit 0 Puerto C del Data Register.
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	88 b9       	out	0x08, r24	; 8
		return 0;
}


int main(void) {
	signed char i=3; /* Declaro indice */
  d0:	13 e0       	ldi	r17, 0x03	; 3
  d2:	17 c0       	rjmp	.+46     	; 0x102 <main+0x5a>
	//Las anteriores 2 instrucciones configuran el pin PC0 con pull-up. Usara la resistencia interna de pull-up.

	while(1){
		while(!puls())
		{
				i++;
  d4:	1f 5f       	subi	r17, 0xFF	; 255
				if (i==4) {
  d6:	14 30       	cpi	r17, 0x04	; 4
  d8:	09 f4       	brne	.+2      	; 0xdc <main+0x34>
					i=0;
  da:	10 e0       	ldi	r17, 0x00	; 0
				}
				PORTB = vec1[i]; /* Pongo en PORTB el valor del arreglo en la posición i */
  dc:	e1 e0       	ldi	r30, 0x01	; 1
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ec 0f       	add	r30, r28
  e2:	fd 1f       	adc	r31, r29
  e4:	e1 0f       	add	r30, r17
  e6:	f1 1d       	adc	r31, r1
  e8:	17 fd       	sbrc	r17, 7
  ea:	fa 95       	dec	r31
  ec:	80 81       	ld	r24, Z
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	80 e7       	ldi	r24, 0x70	; 112
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x4e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x58>
 100:	00 00       	nop
	DDRC = 0xFE; 	// Se asigna el valor 0b11111110 en hexadecimal al puerto C de Data Direction Register. Lo que hace es asignar el bit 0 como entrada.
	PORTC = 1<<PINC0; 	//Se asigna 1 al bit 0 Puerto C del Data Register.
	//Las anteriores 2 instrucciones configuran el pin PC0 con pull-up. Usara la resistencia interna de pull-up.

	while(1){
		while(!puls())
 102:	0e 94 40 00 	call	0x80	; 0x80 <puls>
 106:	88 23       	and	r24, r24
 108:	29 f3       	breq	.-54     	; 0xd4 <main+0x2c>
 10a:	16 c0       	rjmp	.+44     	; 0x138 <main+0x90>
				PORTB = vec1[i]; /* Pongo en PORTB el valor del arreglo en la posición i */
				_delay_ms(100);
		}
		while(!puls())
		{
			i--;
 10c:	11 50       	subi	r17, 0x01	; 1
 10e:	08 f4       	brcc	.+2      	; 0x112 <main+0x6a>
			if (i==-1) {
				i=3;
 110:	13 e0       	ldi	r17, 0x03	; 3
			}
			PORTB = vec1[i]; /* Pongo en PORTB el valor del arreglo en la posición i */
 112:	e1 e0       	ldi	r30, 0x01	; 1
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	ec 0f       	add	r30, r28
 118:	fd 1f       	adc	r31, r29
 11a:	e1 0f       	add	r30, r17
 11c:	f1 1d       	adc	r31, r1
 11e:	17 fd       	sbrc	r17, 7
 120:	fa 95       	dec	r31
 122:	80 81       	ld	r24, Z
 124:	85 b9       	out	0x05, r24	; 5
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	80 e7       	ldi	r24, 0x70	; 112
 12a:	92 e0       	ldi	r25, 0x02	; 2
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x84>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x8e>
 136:	00 00       	nop
					i=0;
				}
				PORTB = vec1[i]; /* Pongo en PORTB el valor del arreglo en la posición i */
				_delay_ms(100);
		}
		while(!puls())
 138:	0e 94 40 00 	call	0x80	; 0x80 <puls>
 13c:	88 23       	and	r24, r24
 13e:	31 f3       	breq	.-52     	; 0x10c <main+0x64>
 140:	e0 cf       	rjmp	.-64     	; 0x102 <main+0x5a>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
